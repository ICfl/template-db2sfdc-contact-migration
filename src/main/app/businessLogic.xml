<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:core="http://www.mulesoft.org/schema/mule/core" 
xmlns:http="http://www.mulesoft.org/schema/mule/http" 
xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
xmlns="http://www.mulesoft.org/schema/mule/core" 
xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
xmlns:json="http://www.mulesoft.org/schema/mule/json"
xmlns:spring="http://www.springframework.org/schema/beans" 
version="EE-3.6.2" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd">
    <data-mapper:config name="Contact_To_Contact" transformationGraphPath="contact_to_contact.grf" doc:name="Contact_To_Contact"/>

    <batch:job name="syncContactBatch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
	        <db:select config-ref="Database" doc:name="Query Contact from Database">
                <db:parameterized-query><![CDATA[SELECT ID,AccountName,FirstName,LastName,Phone,SalesforceId,LastModifiedById,Name,Email FROM contact;]]></db:parameterized-query>


	
	        </db:select>
        </batch:input>
        <batch:process-records>
            <batch:step name="getContactInSalesforceStep">
                <enricher source="#[payload]" target="#[recordVars['contactInSalesforce']]" doc:name="store result in 'contactInSalesforce'">
                    <sfdc:query-single config-ref="Salesforce" query="SELECT Id,Name FROM Contact WHERE Name = '#[payload[&quot;Name&quot;]]'" doc:name="Query Salesforce for Contact"/>
                </enricher>
            </batch:step>
            <batch:step name="findOrCreateAccountInSalesforceStep" accept-expression="'syncAccount' == '${account.sync.policy}'">
            
	            <choice doc:name="Choice">
	                	<when expression="#[payload['AccountName'] != null]">
                        <enricher source="#[payload]" target="#[recordVars['sfAccount']]" doc:name="store result in 'sfAccount'">
                            <sfdc:query-single config-ref="Salesforce" query="SELECT Id, Name FROM Account WHERE Name = '#[payload['AccountName']]'" doc:name="Query Account in  Salesforce Instance"/>
                        </enricher>

	                <choice doc:name="Choice">
	                    <when expression="#[recordVars['sfAccount'] is NullPayload]">
	                        <enricher doc:name="store result in 'idOfAccountInSalesforce'" target="#[recordVars['idOfAccountInSalesforce']]" source="#[payload]">
		                        <processor-chain doc:name="Processor Chain">



	       		                     <sfdc:create-single config-ref="Salesforce" type="Account" doc:name="Create Account in Salesforce">
                                            <sfdc:object>
                                                <sfdc:object key="Name">#[payload['AccountName']]</sfdc:object>
                                            </sfdc:object>

	       	        	             </sfdc:create-single>

	                                <expression-transformer expression="#[payload.getId()]" doc:name="Get new account id"/>
		                        </processor-chain>
	                        </enricher>
	                    </when>
	                    <otherwise>

	                        <enricher target="#[recordVars['idOfAccountInSalesforce']]" doc:name="store result in idOfAccountInSalesforce" source="#[payload]">
	     	                   <expression-transformer expression="#[recordVars['sfAccount']['Id']]" doc:name="Get new account id"/>
	                        </enricher>
	                    </otherwise>
	                </choice>

	                <expression-component doc:name="Set AccountId"><![CDATA[payload['AccountId'] = recordVars['idOfAccountInSalesforce'];
	]]></expression-component>
	</when>
	                    <otherwise>
	                        <logger level="INFO" doc:name="Logger" message="There is no Account assigned to this contact. Doing nothing"/>
	                    </otherwise>
	                </choice>            
            
            </batch:step>
            
            <batch:step name="doNotCreateAccountStep" accept-expression="'doNotCreateAccount' == '${account.sync.policy}'">
                <expression-component doc:name="Remove AccountId"><![CDATA[payload.remove('AccountId');]]></expression-component>
            </batch:step>            
            <batch:step name="upsertContactInSalesforceStep">

                <data-mapper:transform config-ref="Contact_To_Contact" doc:name="Contact To Contact"/>
                <expression-component doc:name="Prepare Contact for upsert"><![CDATA[if (recordVars['contactInSalesforce'] instanceof NullPayload) {
	// Remove ID as it is an insert
	payload.remove('Id');
} else {
	// Add target system ID as it is an update
    payload.put('Id', recordVars['contactInSalesforce']['Id']);
}

]]></expression-component>

                <batch:commit size="100" doc:name="Batch Commit">
                    <sfdc:upsert config-ref="Salesforce" externalIdFieldName="Id" type="Contact" doc:name="Upsert Contact in Salesforce">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:upsert>
                    <logger message="2222 #[payload]" level="INFO" doc:name="Log result"/>
                </batch:commit>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            <scatter-gather doc:name="All">
                <processor-chain>
                    <json:object-to-json-transformer doc:name="Transform BatchJobInstance to JSON"/>
                    <logger message="Migration process has finished: #[payload]" level="INFO" doc:name="Log migration process has finished"/>
                </processor-chain>
                <processor-chain>
                    <json:object-to-json-transformer doc:name="Transform BatchJobInstance to JSON"/>
                    <smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" connector-ref="gmailConnector" doc:name="Send result of the batch in mail"/>
                </processor-chain>
            </scatter-gather>

        </batch:on-complete>
    </batch:job>

</mule>
